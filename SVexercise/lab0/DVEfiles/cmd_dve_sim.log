ucliGUI::start /home/milo/Codes/ICCodes/SVexercise/lab0/simv -ucligui 
set ucliGUI::state
set ucliGUI::state
ucliCore::getToolPID
synopsys::env hasTB
trigger_hier_stack_context_switch 0
synUtils::setDVEInitPhase 1
synopsys::dump -type VPD -file /home/milo/Codes/ICCodes/SVexercise/lab0/inter.vpd -locking
synopsys::dump -autoflush on -fid VPD1
set ::dve_fid VPD1
synUtils::setDVEInitPhase 0
ucliCore::getToolPID
synUtils::sendTool -active _icl_setToolSocket /tmp/smlnplWfh6H
synUtils::sendTool -active {_icl_start_rpc -version "L-2016.06_Full64" -sync_file /tmp/vcs_dve_rpc.milo.46957}
synUtils::sendTool -active {_icl_createSharedMemory /tmp/vcs_dve_general.milo.46957}
config endofsim noexit
config onfail enable all
config syscaddplainmembers
config syscaddsourcenames
config syscaddstructtypes
synopsys::listing -disable
# Begin_DVE_Session_Save_Info
# DVE restart session
# Saved on Thu Sep 23 10:37:47 2021
# Designs open: 1
#   Sim: /home/milo/Codes/ICCodes/SVexercise/lab0/simv
# Toplevel windows open: 2
# 	TopLevel.1
# 	TopLevel.2
#   Source.1: tb1
#   Wave.1: 17 signals
#   Group count = 4
#   Group Group1 signal count = 17
#   Group Group2 signal count = 17
#   Group Group3 signal count = 17
#   Group Group4 signal count = 17
# End_DVE_Session_Save_Info
# DVE version: L-2016.06_Full64
# DVE build date: May 24 2016 21:01:02
#<Session mode="Restart" path=".restartSimSession.tcl" type="Debug">
# Application preferences
#<WindowLayout>
# DVE top-level session
# Create and position top-level window: TopLevel.1
set TopLevel.1 TopLevel.1
# Docked window settings
set HSPane.1 HSPane.1
set Hier.1 Hier.1
set DLPane.1 DLPane.1
set Data.1 Data.1
set Console.1 Console.1
# MDI window settings
set Source.1 Source.1
# End MDI window settings
# Create and position top-level window: TopLevel.2
set TopLevel.2 TopLevel.2
# Docked window settings
# MDI window settings
set Wave.1 Wave.1
# End MDI window settings
#</WindowLayout>
#<Database>
#</Database>
# DVE Global setting session:
# Global: Breakpoints
# Global: Bus
# Global: Expressions
# Global: Signal Time Shift
# Global: Signal Compare
# Global: Signal Groups
synopsys::dump -add {tb1} -scope "." -depth 1 -fid VPD1
set _session_group_1 Group1
set Group1 "$_session_group_1"
set _session_group_2 Group2
set Group2 "$_session_group_2"
set _session_group_3 Group3
set Group3 "$_session_group_3"
set _session_group_4 Group4
set Group4 "$_session_group_4"
# Global: Highlighting
# Global: Stack
synopsys::xml {set_only_active_frame <data value="1" />}
# Post database loading setting...
# Save global setting...
# Wave/List view global setting
# Close all empty TopLevel windows
foreach __top [gui_ekki_get_window_ids -type TopLevel] {     if { [llength [gui_ekki_get_window_ids -parent $__top]] == 0} {         gui_close_window -window $__top     } }
# DVE View/pane content session:
# Hier 'Hier.1'
catch {gui_list_select -id ${Hier.1} {tb1}}
# Data 'Data.1'
catch { gui_list_select -id ${Data.1} {tb1.ch0_ready tb1.ch0_margin tb1.ch1_ready tb1.ch1_margin tb1.ch2_ready tb1.ch2_margin tb1.mcdt_data tb1.mcdt_val tb1.mcdt_id tb1.clk tb1.rstn tb1.ch0_data tb1.ch0_valid tb1.ch1_data tb1.ch1_valid tb1.ch2_data tb1.ch2_valid }}
# Source 'Source.1'
# View 'Wave.1'
set groupExD [gui_get_pref_value -category Wave -key exclusiveSG]
set origWaveHeight [gui_get_pref_value -category Wave -key waveRowHeight]
set origGroupCreationState [gui_list_create_group_when_add -wave]
if {$origGroupCreationState} { 	gui_list_create_group_when_add -wave -enable }
if { $groupExD } {  gui_msg_report -code DVWW028 }
# Restore toplevel window zorder
# The toplevel window could be closed if it has no view/pane
if {[gui_exist_window -window ${TopLevel.1}]} { 	gui_set_active_window -window ${TopLevel.1} 	gui_set_active_window -window ${Source.1} 	gui_set_active_window -window ${Console.1} }
if {[gui_exist_window -window ${TopLevel.2}]} { 	gui_set_active_window -window ${TopLevel.2} 	gui_set_active_window -window ${Wave.1} }
#</Session>
synopsys::run -relative 1us
set ucliGUI::state
set ucliGUI::state
set ucliGUI::state
set ucliGUI::state
set ucliGUI::state
if [catch {gui_sim_terminate}] {gui_sim_terminate -kill}
synopsys::finish
set ucliGUI::state
set ucliGUI::state
ucli_exit
